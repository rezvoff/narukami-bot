#narukami/cogs/misc/other_comannds.py | –ö–æ–¥–∏–ª: —Ä–µ–∑–≤–æ—Ñ | –û—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥. Telegram channel: https://t.me/rezvof | GitHub: https://github.com/rezvoff

import discord
import random
from discord.ext import commands
from discord import app_commands
import random
import re
import asyncio
from cogs.management import get_donate_balance, get_user_data, set_user_data, update_user_data

class OtherCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.hug_gifs = [
            "https://media.giphy.com/media/od5H3PmEG5EVq/giphy.gif",
            "https://media.giphy.com/media/lrr9rHuoJOE0w/giphy.gif",
            "https://media.giphy.com/media/sUIZWMnfd4Mb6/giphy.gif",
            "https://media.giphy.com/media/143v0Z4767T15e/giphy.gif",
            "https://media.giphy.com/media/BXrwTdoho6hkQ/giphy.gif"
        ]
        self.kiss_gifs = [
            "https://tenor.com/jRVsCzxMYlx.gif",
            "https://tenor.com/eYQnMPJpmBv.gif",
            "https://tenor.com/ssYm4SG8oLK.gif",
            "https://tenor.com/2Q4hZP5j7g6.gif",
            "https://tenor.com/b1Ds9.gif",
            "https://tenor.com/bYxTK.gif",
            "https://tenor.com/bAZMT.gif"
        ]
        self.choke_gifs = [
            "https://tenor.com/bThXg.gif",
            "https://tenor.com/bNiK4.gif"
        ]
        self.voice_time_tracker = {}

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        TRIGGER_CHANNEL_ID = 1259986306495414343  
        RANDOM_CATEGORY_ID = 1255925236956790857
        ACCESS_ROLE_ID = 1259989726954393661
        LOVEROOM_CHANNEL_ID = 1259987254626226206 
        PRIVATE_CATEGORY_ID = 1259990534483869857 # —Å–ª–æ–≤–∞—Ä—å —Ä–æ–ª–µ–π, –ø–æ–¥–∫–ª—é—á–∞–µ–º—ã—Ö –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º

        if after.channel and after.channel.id == TRIGGER_CHANNEL_ID:
            random_category = self.bot.get_channel(RANDOM_CATEGORY_ID)

            available_channels = [channel for channel in random_category.voice_channels if len(channel.members) < channel.user_limit]

            if available_channels:
                random_channel = random.choice(available_channels)
                await member.move_to(random_channel)
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.name} –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∫–∞–Ω–∞–ª {random_channel.name}.")
            else:
                await member.send("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.name} - –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª–Ω—ã.")

        if after.channel and after.channel.id == LOVEROOM_CHANNEL_ID:
            private_category = self.bot.get_channel(PRIVATE_CATEGORY_ID)
            private_channel = await private_category.create_voice_channel(
                name=f"üíó –õ–∞–≤ –†—É–º–∞ {member.name}",
                user_limit=2

            )
            access_role = member.guild.get_role(ACCESS_ROLE_ID)
            await private_channel.set_permissions(member.guild.default_role, connect=False)
            await private_channel.set_permissions(access_role, connect=True)
            await member.move_to(private_channel)
            print(f"–°–æ–∑–¥–∞–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {private_channel.name} –¥–ª—è {member.name}.")

        user_id = str(member.id)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        if after.channel is not None and before.channel is None:
            self.voice_time_tracker[user_id] = {
                "start_time": discord.utils.utcnow(),
                "task": self.bot.loop.create_task(self.track_voice_time(member))
            }

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if before.channel is not None and after.channel is None:
            if user_id in self.voice_time_tracker:
                await self.stop_tracking_voice_time(user_id)

    async def track_voice_time(self, member):
        user_id = str(member.id)
        while True:
            await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            if user_id not in self.voice_time_tracker:
                break

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
            if member.voice and member.voice.channel:
                current_time = discord.utils.utcnow()
                start_time = self.voice_time_tracker[user_id]["start_time"]
                total_seconds = (current_time - start_time).total_seconds()

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ user_data.json
                user_data = get_user_data(member.id)
                user_data["voice_time"] = user_data.get("voice_time", 0) + int(total_seconds)
                update_user_data(member.id, user_data)

                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                self.voice_time_tracker[user_id]["start_time"] = current_time
            else:
                await self.stop_tracking_voice_time(user_id)
                break

    async def stop_tracking_voice_time(self, user_id):
        if user_id in self.voice_time_tracker:
            self.voice_time_tracker[user_id]["task"].cancel()
            del self.voice_time_tracker[user_id]

    @app_commands.command(name="–ø–æ–º–æ—â—å", description="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞.")
    async def –ø–æ–º–æ—â—å(self, interaction: discord.Interaction, *, –≤–æ–ø—Ä–æ—Å: str):
        –Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞ = random.randint(123000, 999999)

        embed = discord.Embed(
            title="–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            description=f"–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞.\n\n**–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞:** #{–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞}",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

        –∫–∞–Ω–∞–ª_–¥–ª—è_–∞–¥–º–∏–Ω–æ–≤ = interaction.guild.get_channel(1263368024329682985) 
        if –∫–∞–Ω–∞–ª_–¥–ª—è_–∞–¥–º–∏–Ω–æ–≤:
            embed_–∞–¥–º–∏–Ω = discord.Embed(
                title="–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
                description=f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {interaction.user.mention}\n**–í–æ–ø—Ä–æ—Å (#{–Ω–æ–º–µ—Ä_–≤–æ–ø—Ä–æ—Å–∞}):** {–≤–æ–ø—Ä–æ—Å}",
                color=discord.Color.blue()
            )
            await –∫–∞–Ω–∞–ª_–¥–ª—è_–∞–¥–º–∏–Ω–æ–≤.send(embed=embed_–∞–¥–º–∏–Ω)

    @commands.hybrid_command(name="–æ–±–Ω—è—Ç—å", description="–û–±–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    @app_commands.describe(—é–∑–µ—Ä="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ–±–Ω—è—Ç—å.")
    async def –æ–±–Ω—è—Ç—å(self, ctx: commands.Context, —é–∑–µ—Ä: discord.Member):
        random_gif = random.choice(self.hug_gifs)

        embed = discord.Embed(
            description=f"{ctx.author.mention} **–æ–±–Ω–∏–º–∞–µ—Ç** {—é–∑–µ—Ä.mention}**!**",
            color=discord.Color.purple()
        )
        embed.set_image(url=random_gif)

        await ctx.send(embed=embed)

    @commands.hybrid_command(name="–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å", description="–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    @app_commands.describe(—é–∑–µ—Ä="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å.")
    async def –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å(self, ctx: commands.Context, —é–∑–µ—Ä: discord.Member):
        random_gif = random.choice(self.kiss_gifs)

        embed = discord.Embed(
            description=f"{ctx.author.mention} **—Ü–µ–ª—É–µ—Ç** {—é–∑–µ—Ä.mention}**!**",
            color=discord.Color.purple()
        )
        embed.set_image(url=random_gif)

        await ctx.send(embed=embed)

    @commands.hybrid_command(name="—Ç—ã–∫", description="–¢—ã–∫–Ω—É—Ç—å –≤ —â–µ—á–∫—É.")
    @app_commands.describe(—é–∑–µ—Ä="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ —Ç—ã–∫–Ω—É—Ç—å.")
    async def —Ç—ã–∫(self, ctx: commands.Context, —é–∑–µ—Ä: discord.Member):
        random_gif = random.choice(self.choke_gifs)

        embed = discord.Embed(
            description=f"{ctx.author.mention} **—Ç—ã–∫–∞–µ—Ç –≤ —â–µ—á–∫—É** {—é–∑–µ—Ä.mention}**!**",
            color=discord.Color.purple()
        )
        embed.set_image(url=random_gif)

        await ctx.send(embed=embed)

    @commands.hybrid_command(name="–ø–∏–Ω–≥", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∏–Ω–≥ –±–æ—Ç–∞")
    async def ping(self, ctx: commands.Context):
        ping = round(self.bot.latency * 1000)
        await ctx.send(f'**–ü–∏–Ω–≥:** `{ping}ms`')

    @commands.hybrid_command(name="—Å–µ—Ä–≤–µ—Ä", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ")
    async def —Å–µ—Ä–≤–µ—Ä(self, ctx: commands.Context):

        emoji_checkbox = discord.utils.get(self.bot.emojis, name="checkbox")
        emoji_online = discord.utils.get(self.bot.emojis, name="online")
        emoji_info = discord.utils.get(self.bot.emojis, name="info")

        guild = ctx.guild

        creation_date = guild.created_at.strftime("%d.%m.%Y")
        total_members = guild.member_count
        online_members = sum(1 for member in guild.members if member.status != discord.Status.offline)


        embed = discord.Embed(title=f"{emoji_checkbox} | –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}", color=discord.Color.blue())
        embed.set_thumbnail(url=guild.icon.url)
        embed.add_field(name=f"{emoji_info} | –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:", value=creation_date, inline=False)
        embed.add_field(name=f"{emoji_info} | –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", value=total_members, inline=False)
        embed.add_field(name=f"{emoji_online} | –í —Å–µ—Ç–∏:", value=online_members, inline=False)
        embed.add_field(name=f"{emoji_info} | –í–ª–∞–¥–µ–ª–µ—Ü:", value=guild.owner.mention, inline=False)
        embed.add_field(name=f"{emoji_info} | –û–ø–∏—Å–∞–Ω–∏–µ:", value=guild.description, inline=False)
        embed.set_footer(text=f"–í—ã–ø–æ–ª–Ω–∏–ª: {ctx.author}", icon_url=ctx.author.display_avatar.url)

        await ctx.send(embed=embed)



    @app_commands.command(name="–ø—Ä–æ—Ñ–∏–ª—å", description="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
    async def –ø—Ä–æ—Ñ–∏–ª—å(self, interaction: discord.Interaction, user: discord.Member = None):
        user = user or interaction.user

        emoji_profile = discord.utils.get(self.bot.emojis, name="profile")
        emoji_time = discord.utils.get(self.bot.emojis, name="time")
        emoji_telegram = discord.utils.get(self.bot.emojis, name="telegram")
        emoji_instagram = discord.utils.get(self.bot.emojis, name="instagram")
        emoji_vkontakte = discord.utils.get(self.bot.emojis, name="vkontakte")
        emoji_ruble = discord.utils.get(self.bot.emojis, name="ruble")
        emoji_info = discord.utils.get(self.bot.emojis, name="info")

        user_data = get_user_data(user.id)
        telegram = user_data.get("telegram", None)
        instagram = user_data.get("instagram", None)
        vkontakte = user_data.get("vkontakte", None)
        donate_balance = get_donate_balance(user.id)
        server_time = int((discord.utils.utcnow() - user.joined_at).days) 
        total_voice_seconds = user_data.get("voice_time", 0)
        hours, remainder = divmod(total_voice_seconds, 3600)
        minutes = remainder // 60

        if telegram and not re.match(r"^(https?://)?(www\.)?t\.me/.+$", telegram):
            telegram = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram"
        if instagram and not re.match(r"^(https?://)?(www\.)?instagram\.com/.+$", instagram):
            instagram = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Instagram"
        if vkontakte and not re.match(r"^(https?://)?(www\.)?vk\.com/.+$", vkontakte):
            vkontakte = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"

        embed = discord.Embed(
            description=f"{emoji_profile} | **–ü—Ä–æ—Ñ–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞** {user.mention}\n"
                        f"{emoji_telegram} **Telegram:** {telegram or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"{emoji_vkontakte} **–í–ö–æ–Ω—Ç–∞–∫—Ç–µ:** {vkontakte or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                        f"{emoji_instagram} **Instagram:** {instagram or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                        f"{emoji_ruble} **–†—É–±–ª–∏:** {donate_balance}‚ÇΩ\n\n"
                        f"{emoji_info} **–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ:** {server_time} –¥–Ω–µ–π\n"
                        f"{emoji_time} **–ü—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ –≤–æ–π—Å–µ:** {hours} **—á–∞—Å–æ–≤** {minutes} **–º–∏–Ω—É—Ç**",
            color=discord.Color.blue()
        )
        embed.set_thumbnail(url=user.avatar.url)

        view = discord.ui.View()
        view.add_item(discord.ui.Button(label="–ò–∑–º–µ–Ω–∏—Ç—å Telegram", style=discord.ButtonStyle.primary, custom_id="add_telegram"))
        view.add_item(discord.ui.Button(label="–ò–∑–º–µ–Ω–∏—Ç—å Instagram", style=discord.ButtonStyle.primary, custom_id="add_instagram"))
        view.add_item(discord.ui.Button(label="–ò–∑–º–µ–Ω–∏—Ç—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ", style=discord.ButtonStyle.primary, custom_id="add_vkontakte"))

        async def button_callback(interaction: discord.Interaction):
            if interaction.data["custom_id"] == "add_telegram":
                await interaction.response.send_modal(AddTelegramModal(user.id))
            elif interaction.data["custom_id"] == "add_instagram":
                await interaction.response.send_modal(AddInstagramModal(user.id))
            elif interaction.data["custom_id"] == "add_vkontakte":
                await interaction.response.send_modal(AddVkontakteModal(user.id))

        view.children[0].callback = button_callback
        view.children[1].callback = button_callback
        view.children[2].callback = button_callback

        await interaction.response.send_message(embed=embed, view=view)

class AddTelegramModal(discord.ui.Modal, title="–ò–∑–º–µ–Ω–∏—Ç—å Telegram"):
    def __init__(self, user_id: int):
        super().__init__()
        self.user_id = user_id

        self.add_item(discord.ui.TextInput(
            label="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram",
            placeholder="https://t.me/username",
            style=discord.TextStyle.short,
            required=True
        ))

    async def on_submit(self, interaction: discord.Interaction):
        telegram_link = self.children[0].value

        if not re.match(r"^(https?:\/\/)?(www\.)?t\.me\/[a-zA-Z0-9_]{5,}$", telegram_link):
            await interaction.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", ephemeral=True)
            return

        update_user_data(self.user_id, {"telegram": telegram_link})

        await interaction.response.send_message("–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram –¥–æ–±–∞–≤–ª–µ–Ω–∞!", ephemeral=True)

class AddInstagramModal(discord.ui.Modal, title="–ò–∑–º–µ–Ω–∏—Ç—å Instagram"):
    def __init__(self, user_id: int):
        super().__init__()
        self.user_id = user_id

        self.add_item(discord.ui.TextInput(
            label="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Instagram",
            placeholder="https://instagram.com/username",
            style=discord.TextStyle.short,
            required=True
        ))

    async def on_submit(self, interaction: discord.Interaction):
        instagram_link = self.children[0].value

        if not re.match(r"^(https?://)?(www\.)?instagram\.com/.+$", instagram_link):
            await interaction.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Instagram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", ephemeral=True)
            return

        update_user_data(self.user_id, {"instagram": instagram_link})

        await interaction.response.send_message("–°—Å—ã–ª–∫–∞ –Ω–∞ Instagram –¥–æ–±–∞–≤–ª–µ–Ω–∞!", ephemeral=True)

class AddVkontakteModal(discord.ui.Modal, title="–ò–∑–º–µ–Ω–∏—Ç—å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ"):
    def __init__(self, user_id: int):
        super().__init__()
        self.user_id = user_id

        self.add_item(discord.ui.TextInput(
            label="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ",
            placeholder="https://vk.com/username",
            style=discord.TextStyle.short,
            required=True
        ))

    async def on_submit(self, interaction: discord.Interaction):
        vkontakte_link = self.children[0].value

        if not re.match(r"^(https?://)?(www\.)?vk\.com/.+$", vkontakte_link):
            await interaction.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", ephemeral=True)
            return

        update_user_data(self.user_id, {"vkontakte": vkontakte_link})

        await interaction.response.send_message("–°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", ephemeral=True)
    

async def setup(bot):
    await bot.add_cog(OtherCommands(bot))