#narukami/cogs/economy/economy_main.py | –ö–æ–¥–∏–ª: —Ä–µ–∑–≤–æ—Ñ | –û—Ç–∫—Ä—ã—Ç—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥. Telegram channel: https://t.me/rezvof | GitHub: https://github.com/rezvoff

import discord
import random
from discord.ext import commands, tasks
import json

import requests
from cogs.management import Economy, get_balance, set_balance, get_donate_balance,set_donate_balance, get_crypto_balance, set_crypto_balance

ZERO_COMMISSION_ROLE_ID = 0000000000000000000 # ID —Ä–æ–ª–∏ –Ω—É–ª–µ–≤–æ–π –∫–æ–º–∏—Å—Å–∏–∏ (specials)
DOUBLE_REWARD_ROLE_ID = 0000000000000000000 # ID —Ä–æ–ª–∏ —É–¥–≤–∞–∏–≤–∞—é—â–µ–π—Å—è –Ω–∞–≥—Ä–∞–¥–∞ (specials)

class BalanceCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.give_coins.start() 
        self.give_donate_currency.start() 
    def cog_unload(self):
        self.give_coins.cancel()  
        self.give_donate_currency.cancel()

    @tasks.loop(minutes=3)  
    async def give_coins(self):
        for guild in self.bot.guilds:
            for voice_channel in guild.voice_channels:  
                for member in voice_channel.members:  
                    if not member.bot:
                        coins = random.randint(1, 10) 
                        current_balance = get_balance(member.id)
                        set_balance(member.id, current_balance + coins)
                        print(f"–í—ã–¥–∞–Ω–æ {coins} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name} ({member.id}).")

    @give_coins.before_loop
    async def before_give_coins(self):
        await self.bot.wait_until_ready()  

    @tasks.loop(hours=1)  
    async def give_donate_currency(self):
        for guild in self.bot.guilds:
            for voice_channel in guild.voice_channels:
                for member in voice_channel.members:
                    if not member.bot:
                        donate_currency = random.randint(1, 5)  
                        current_donate_balance = get_donate_balance(member.id)
                        set_donate_balance(member.id, current_donate_balance + donate_currency)
                        print(f"–í—ã–¥–∞–Ω–æ {donate_currency} –¥–æ–Ω–∞—Ç-–≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.name} ({member.id}).")

    @give_donate_currency.before_loop
    async def before_give_donate_currency(self):
        await self.bot.wait_until_ready()  
    @give_donate_currency.before_loop
    async def before_give_donate_currency(self):
        await self.bot.wait_until_ready()

    @commands.command(name="balance", aliases=["bal"], description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞.")
    @commands.cooldown(1, 15, commands.BucketType.user)
    async def balance(self, ctx, member: discord.Member = None):

        emoji_ruble = discord.utils.get(ctx.guild.emojis, name="ruble")
        emoji_coin = discord.utils.get(ctx.guild.emojis, name="coin")
        emoji_btc = discord.utils.get(ctx.guild.emojis, name="btc")

        if member is None:
            member = ctx.author

        user_balance = get_balance(member.id)
        donate_balance = get_donate_balance(member.id)
        crypto_balance = get_crypto_balance(member.id)  

        embed = discord.Embed(title=f"–ë–∞–ª–∞–Ω—Å {member.display_name}", color=discord.Color.blue())
        embed.add_field(name="–ú–æ–Ω–µ—Ç—ã:", value=f"**{user_balance:,}** {emoji_coin}", inline=False)
        embed.add_field(name="–†—É–±–ª–∏:", value=f"**{donate_balance:,}** {emoji_ruble}", inline=False)
        embed.add_field(name="BTC:", value=f"**{crypto_balance:.2f}** {emoji_btc}", inline=False)
        embed.set_footer(text=f"–ü–µ—Ä–µ–≤–æ–¥ –≤–∞–ª—é—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–µ–Ω —á–µ—Ä–µ–∑: ,transfer <@—é–∑–µ—Ä> <–≤–∞–ª—é—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>. –ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞: 7%", icon_url=self.bot.user.display_avatar.url)
        await ctx.send(embed=embed)

    @balance.error
    async def balance_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            retry_after = int(error.retry_after)

            embed = discord.Embed(title="–ö—É–ª–¥–∞—É–Ω", color=discord.Color.blue())
            embed.description = f"–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {retry_after} —Å–µ–∫—É–Ω–¥."
            await ctx.send(embed=embed)
        else:
            raise error
    
    @commands.command(name="setmoney", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    @commands.has_permissions(administrator=True)
    async def setmoney(self, ctx, member: discord.Member, currency: str, amount: int):
        emoji_admins = discord.utils.get(self.bot.emojis, name="admins")

        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–Ω–µ—Ç—ã –∏–ª–∏ —Ä—É–±–ª–∏)."""
        currency = currency.lower() 
        if currency not in ["–º–æ–Ω–µ—Ç—ã", "—Ä—É–±–ª–∏", "–±–∏—Ç–∫–æ–∏–Ω—ã"]:
            await ctx.send("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–º–æ–Ω–µ—Ç—ã' –∏–ª–∏ '—Ä—É–±–ª–∏'.", delete_after=7)
            return

        if currency == "–º–æ–Ω–µ—Ç—ã":
            set_balance(member.id, amount)
            balance_type = "–º–æ–Ω–µ—Ç"
        elif currency == "—Ä—É–±–ª–∏":
            set_donate_balance(member.id, amount)
            balance_type = "—Ä—É–±–ª–µ–π"
        elif currency == "–±–∏—Ç–∫–æ–∏–Ω—ã":
            set_crypto_balance(member.id, amount)
            balance_type = "–±–∏—Ç–∫–æ–∏–Ω–æ–≤"

        embed = discord.Embed(title=f"{emoji_admins} [–ê–î–ú–ò–ù] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", color=discord.Color.blue())
        embed.description = f"–ë–∞–ª–∞–Ω—Å {balance_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {amount:,}."
        embed.set_footer(text="–ù–µ –ø—ã—Ç–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–∞–º, —ç—Ç–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        await ctx.send(embed=embed)

    @setmoney.error
    async def setmoney_error(self, ctx, error):
        emoji_block = discord.utils.get(ctx.guild.emojis, name="block")
        if isinstance(error, commands.MissingPermissions):
            embed = discord.Embed(title=f"{emoji_block} –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", color=discord.Color.blue())
            await ctx.send(embed=embed)

    @commands.command(name="leaderboard", aliases=["top"], description="–¢–æ–ø 10 –ø–æ –±–∞–ª–∞–Ω—Å—É.")
    async def leaderboard(self, ctx):

        emoji_coin = discord.utils.get(ctx.guild.emojis, name="coin")

        with open("economy.json", "r") as f:
            data = json.load(f)

        sorted_users = sorted(data.items(), key=lambda item: item[1]['balance'], reverse=True)

        embed = discord.Embed(title="üèÜ –¢–æ–ø 10 –±–æ–≥–∞—á–µ–π", color=discord.Color.blue())

        for i in range(min(10, len(sorted_users))):
            user_id, user_data = sorted_users[i]  
            user = await self.bot.fetch_user(int(user_id))
            balance = user_data['balance']  
            embed.add_field(name=f"{i+1}. {user.name}", value=f"{balance:,} {emoji_coin}", inline=False) 
        embed.set_footer(text=f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(sorted_users)}", icon_url=self.bot.user.display_avatar.url)

        await ctx.send(embed=embed)

    @commands.command(name="transfer", description="–ü–µ—Ä–µ–≤–æ–¥ –≤–∞–ª—é—Ç—ã –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    async def transfer(self, ctx, recipient: discord.Member, currency: str, amount: int):
        """–ü–µ—Ä–µ–≤–æ–¥ –º–æ–Ω–µ—Ç –∏–ª–∏ —Ä—É–±–ª–µ–π –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        currency = currency.lower()  

        if amount <= 0:
            await ctx.send("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∏–ª–∏ –Ω—É–ª–µ–≤—É—é —Å—É–º–º—É.", delete_after=7)
            return

        if currency == "–º–æ–Ω–µ—Ç—ã":
            sender_balance = get_balance(ctx.author.id)
            balance_type = "–º–æ–Ω–µ—Ç"
        elif currency == "—Ä—É–±–ª–∏":
            sender_balance = get_donate_balance(ctx.author.id)
            balance_type = "—Ä—É–±–ª–µ–π"
        else:
            await ctx.send("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–º–æ–Ω–µ—Ç—ã' –∏–ª–∏ '—Ä—É–±–ª–∏'.", delete_after=7)
            return

        if sender_balance < amount:
            await ctx.send(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {balance_type} –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", delete_after=7)
            return

        has_zero_commission = discord.utils.get(ctx.author.roles, id=ZERO_COMMISSION_ROLE_ID) is not None

        if has_zero_commission:
            commission = 0
        else:
            commission = int(amount * 0.07)  

        transfer_amount = amount - commission

        if currency == "–º–æ–Ω–µ—Ç—ã":
            set_balance(ctx.author.id, sender_balance - amount)
            set_balance(recipient.id, get_balance(recipient.id) + transfer_amount)
        else:
            set_donate_balance(ctx.author.id, sender_balance - amount)
            set_donate_balance(recipient.id, get_donate_balance(recipient.id) + transfer_amount)

        embed = discord.Embed(title=f"–ü–µ—Ä–µ–≤–æ–¥—ã {balance_type}", color=discord.Color.blue())
        embed.add_field(name="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:", value=ctx.author.mention, inline=False)
        embed.add_field(name="–ü–æ–ª—É—á–∞—Ç–µ–ª—å:", value=recipient.mention, inline=False)
        embed.add_field(name="–°—É–º–º–∞:", value=f"**{amount:,}** {balance_type}", inline=False)
        embed.add_field(name="–ö–æ–º–∏—Å—Å–∏—è:", value=f"{commission} {balance_type}", inline=False)
        embed.add_field(name="–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ:", value=f"**{transfer_amount:,}** {balance_type}", inline=False)
        embed.set_footer(text="–ü–µ—Ä–µ–≤–æ–¥–∏ –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å 0% –∫–æ–º–∏—Å—Å–∏–µ–π –∫—É–ø–∏–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ä–æ–ª—å. –ù–µ —Ç—Ä–∞—Ç—å –≤—Ä–µ–º—è –∏ –¥–µ–Ω—å–≥–∏ –∑—Ä—è!", icon_url=self.user.display_avatar.url)
        await ctx.send(embed=embed)

    @commands.command(name="work", description="–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏.")
    @commands.cooldown(1, 3600, commands.BucketType.user)
    async def work(self, ctx):

        emoji_coin = discord.utils.get(ctx.guild.emojis, name="coin")
        user_id = ctx.author.id
        earned_amount = random.randint(100, 500) 

        if str(ctx.author.id) not in Economy().data:
            Economy().data[str(ctx.author.id)] = {"balance": 0, "donate_balance": 0, "crypto_balance": 0.00}
            Economy().save()

        current_balance = get_balance(user_id)
        new_balance = current_balance + earned_amount
        set_balance(user_id, new_balance)

        embed = discord.Embed(title="–ü–∞—Ö–∞—Ä—å", color=discord.Color.blue())
        embed.description = f"–¢–≤–æ–∏ —á–∏—Å—Ç—ã–µ: **{earned_amount:,}** {emoji_coin}\n" \
                            f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: **{new_balance:,}** {emoji_coin}"
        embed.set_footer(text="–¢—ã –º–æ–∂–µ—à—å –ø–∞—Ö–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—è –¥–µ–Ω—å–≥–∏ —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞!", icon_url=self.bot.user.display_avatar.url)
        await ctx.send(embed=embed)

    @work.error
    async def work_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            retry_after = int(error.retry_after)
            hours, remainder = divmod(retry_after, 3600)
            minutes, seconds = divmod(remainder, 60)

            embed = discord.Embed(title="–ö—É–ª–¥–∞—É–Ω", color=discord.Color.blue())
            embed.description = f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º–∏–Ω {seconds}—Å–µ–∫."
            await ctx.send(embed=embed)
        else:
            raise error
        
    @commands.command(name="lucky", description="–ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É! –ü—Ä–∏–º–µ—Ä: ,lucky <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <")
    async def lucky(self, ctx, amount: int, multiplier: int):

        emoji_congrats = discord.utils.get(self.bot.emojis, name="congrats")
        emoji_coin = discord.utils.get(ctx.guild.emojis, name="coin")

        if str(ctx.author.id) not in Economy().data:
            Economy().data[str(ctx.author.id)] = {"balance": 0, "donate_balance": 0, "crypto_balance": 0.00}
            Economy().save()

        user_id = ctx.author.id
        balance = get_balance(user_id)

        if amount <= 0 or amount > 10000:
            await ctx.send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏. –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10000 –º–æ–Ω–µ—Ç.", delete_after=7)
            return

        if multiplier < 2 or multiplier > 7:
            await ctx.send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å. –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 7.", delete_after=7)
            return

        if balance < amount:
            await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.", delete_after=7)
            return

        win_chance = 1 / multiplier  
        win_roll = random.random()

        if win_roll <= win_chance:
            # win
            winnings = amount * multiplier
            new_balance = balance + winnings
            set_balance(user_id, new_balance)
            embed = discord.Embed(title=f"{emoji_congrats} –í–∏–Ω!", color=discord.Color.blue())
            embed.description = f"–î—É—Ä–∞–∫–∞–º –≤–µ–∑–µ—ë—Ç. –¢—ã –≤—ã–∏–≥—Ä–∞–ª {winnings:,}{emoji_coin}\n" \
                                f"–¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:,}{emoji_coin}"
            embed.set_image(url="https://cdn.discordapp.com/attachments/1257429797441638603/1258817307682148394/d205a1ae2d9253a9.png?ex=66896c79&is=66881af9&hm=6e66382a0b320d7104c68033a611737c233e848899ad281f389c0636dcff76ad&")
            embed.set_footer(text="–ß–µ–º –≤—ã—à–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å –ø—Ä–æ–∏–≥—Ä—ã—à–∞, –Ω–æ –≤—ã–∏–≥—Ä—ã—à –≤—ã—à–µ! –ù–µ —Ä–∏—Å–∫—É–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ–±—ã—á–Ω—ã–º –ø—É—Ç—ë–º.", icon_url=self.bot.user.display_avatar.url)
        else:
            # lose
            new_balance = balance - amount
            set_balance(user_id, new_balance)
            embed = discord.Embed(title="–õ—É–∑", color=discord.Color.red())
            embed.description = f"–ú–Ω–æ–≥–æ —Ö–æ—á–µ—à—å, —Ç–∞–∫ —á—Ç–æ, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª(–∞) {amount:,}{emoji_coin}\n" \
                                f"–¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:,}{emoji_coin}"
            embed.set_image(url="https://cdn.discordapp.com/attachments/1257429797441638603/1258817332856225942/bff626df5539f18f.png?ex=66896c7f&is=66881aff&hm=88c6bad50f1ecfd2cf8d5ba9560c63688dd2607f28ac6315b65eb2ec96a21661&")
            embed.set_footer(text="–ß–µ–º –≤—ã—à–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å, —Ç–µ–º –±–æ–ª—å—à–µ —à–∞–Ω—Å –ø—Ä–æ–∏–≥—Ä—ã—à–∞, –Ω–æ –≤—ã–∏–≥—Ä—ã—à –≤—ã—à–µ! –ù–µ —Ä–∏—Å–∫—É–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ–±—ã—á–Ω—ã–º –ø—É—Ç—ë–º.", icon_url=self.bot.user.display_avatar.url)

        await ctx.send(embed=embed)

    @commands.command(name="reward", description="–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É.")
    @commands.cooldown(1, 86400, commands.BucketType.user) 
    async def reward(self, ctx):

        emoji_gift = discord.utils.get(self.bot.emojis, name="gift")
        emoji_coin = discord.utils.get(ctx.guild.emojis, name="coin")

        if str(ctx.author.id) not in Economy().data:
            Economy().data[str(ctx.author.id)] = {"balance": 0, "donate_balance": 0, "crypto_balance": 0.00}
            Economy().save()

        has_double_reward = discord.utils.get(ctx.author.roles, id=DOUBLE_REWARD_ROLE_ID) is not None

        reward = 300  
        if has_double_reward:
            reward *= 2

        new_balance = get_balance(ctx.author.id) + reward
        set_balance(ctx.author.id, new_balance)

        embed = discord.Embed(title=f"{emoji_gift} –û–ø–∞, –µ–∂–µ–¥–Ω–µ–≤–∫–∞ –ø–æ–¥—ä–µ—Ö–∞–ª–∞", color=discord.Color.blue())
        embed.description = f"–¢—ã –∑–∞–ª—É—Ç–∞–ª(–∞) **{reward:,}**{emoji_coin}\n" \
                            f"–¢–≤–æ–π –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **{new_balance:,}**{emoji_coin}"
        embed.set_footer(text="–¢—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞. –ò –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏ —É–¥–≤–∞–∏–≤–∞—é—Ç—Å—è –Ω–∞–≥—Ä–∞–¥—ã.")
        embed.set_image(url="https://cdn.discordapp.com/attachments/1257429797441638603/1258818525817077790/3cb84491e79c1b55a975d37f189ea495.png?ex=66896d9c&is=66881c1c&hm=0a0099f801f0ba2e08ede8f23904e13467f209bf9bafd0178ea0ced55355aaed&")
        await ctx.send(embed=embed)

    @reward.error
    async def reward_error(self, ctx, error):
        if isinstance(error, commands.CommandOnCooldown):
            retry_after = int(error.retry_after)
            hours, remainder = divmod(retry_after, 3600)
            minutes, seconds = divmod(remainder, 60)
            await ctx.send(f"–ù–µ –±–∞–ª—É–π—Å—è, –∞ —Ç–æ —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª(–∞) —Å–≤–æ—é –Ω–∞–≥—Ä–∞–¥—É —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º–∏–Ω {seconds}—Å–µ–∫.", delete_after=7)
        else:
            raise error 

    async def get_crypto_price(self, from_currency: str, to_currency: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å –ø–æ–º–æ—â—å—é CoinGecko API."""
        try:
            url = f"https://api.coingecko.com/api/v3/simple/price?ids={from_currency}&vs_currencies={to_currency}"
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()
            exchange_rate = data[from_currency.lower()][to_currency.lower()]
            return exchange_rate
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞: {e}")
            return None

    @commands.command(name="convert", description="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã.")
    async def convert(self, ctx, from_currency: str, amount: float, to_currency: str):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É —Å –∫–æ–º–∏—Å—Å–∏–µ–π 7% (0% –¥–ª—è —Ä–æ–ª–∏ ZERO_COMMISSION_ROLE_ID)."""

        try:
            from_currency = from_currency.lower()
            to_currency = to_currency.lower()

            if from_currency == to_currency:
                await ctx.send("–ù–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É —Å–∞–º—É –≤ —Å–µ–±—è.", delete_after=7)
                return

            valid_currencies = ["–º–æ–Ω–µ—Ç—ã", "—Ä—É–±–ª–∏", "–±–∏—Ç–∫–æ–∏–Ω—ã"]
            if from_currency not in valid_currencies or to_currency not in valid_currencies:
                await ctx.send("–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: –º–æ–Ω–µ—Ç—ã, —Ä—É–±–ª–∏, –±–∏—Ç–∫–æ–∏–Ω—ã.", delete_after=7)
                return

            if amount <= 0:
                await ctx.send("–ù–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –∏–ª–∏ –Ω—É–ª–µ–≤—É—é —Å—É–º–º—É.", delete_after=7)
                return

            user_balance = get_balance(ctx.author.id)
            user_donate_balance = get_donate_balance(ctx.author.id)
            user_crypto_balance = get_crypto_balance(ctx.author.id)

            has_zero_commission = discord.utils.get(ctx.author.roles, id=ZERO_COMMISSION_ROLE_ID) is not None
            commission_percent = 0.0 if has_zero_commission else 0.07

            # --- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –º–æ–Ω–µ—Ç ---
            if from_currency == "–º–æ–Ω–µ—Ç—ã":
                if user_balance < amount:
                    await ctx.send(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.", delete_after=7)
                    return
                if to_currency == "—Ä—É–±–ª–∏":
                    exchange_rate = 100  # 1 —Ä—É–±–ª—å = 100 –º–æ–Ω–µ—Ç
                    converted_amount = amount / exchange_rate * (1 - commission_percent)
                    set_balance(ctx.author.id, user_balance - amount)
                    set_donate_balance(ctx.author.id, user_donate_balance + converted_amount)
                    from_balance_type = "–º–æ–Ω–µ—Ç"
                    to_balance_type = "—Ä—É–±–ª–µ–π"
                elif to_currency == "–±–∏—Ç–∫–æ–∏–Ω—ã":
                    exchange_rate = await self.get_crypto_price("bitcoin", "usd")
                    if exchange_rate is None:
                        await ctx.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", delete_after=7)
                        return
                    converted_amount = (amount / exchange_rate / 100) * (1 - commission_percent)
                    set_balance(ctx.author.id, user_balance - amount)
                    set_crypto_balance(ctx.author.id, user_crypto_balance + converted_amount)
                    from_balance_type = "–º–æ–Ω–µ—Ç"
                    to_balance_type = "–±–∏—Ç–∫–æ–∏–Ω–æ–≤"

            # --- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ —Ä—É–±–ª–µ–π ---
            elif from_currency == "—Ä—É–±–ª–∏":
                if user_donate_balance < amount:
                    await ctx.send(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–±–ª–µ–π.", delete_after=7)
                    return
                if to_currency == "–º–æ–Ω–µ—Ç—ã":
                    exchange_rate = 100  # 1 —Ä—É–±–ª—å = 100 –º–æ–Ω–µ—Ç
                    converted_amount = amount * exchange_rate * (1 - commission_percent)
                    set_donate_balance(ctx.author.id, user_donate_balance - amount)
                    set_balance(ctx.author.id, user_balance + converted_amount)
                    from_balance_type = "—Ä—É–±–ª–µ–π"
                    to_balance_type = "–º–æ–Ω–µ—Ç"
                elif to_currency == "–±–∏—Ç–∫–æ–∏–Ω—ã":
                    exchange_rate = await self.get_crypto_price("bitcoin", "rub")
                    if exchange_rate is None:
                        await ctx.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", delete_after=7)
                        return
                    converted_amount = (amount / exchange_rate) * (1 - commission_percent)
                    set_donate_balance(ctx.author.id, user_donate_balance - amount)
                    set_crypto_balance(ctx.author.id, user_crypto_balance + converted_amount)
                    from_balance_type = "—Ä—É–±–ª–µ–π"
                    to_balance_type = "–±–∏—Ç–∫–æ–∏–Ω–æ–≤"

            # --- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –±–∏—Ç–∫–æ–∏–Ω–æ–≤ ---
            elif from_currency == "–±–∏—Ç–∫–æ–∏–Ω—ã":
                if user_crypto_balance < amount:
                    await ctx.send(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤.", delete_after=7)
                    return
                if to_currency == "–º–æ–Ω–µ—Ç—ã":
                    exchange_rate = await self.get_crypto_price("bitcoin", "usd")
                    if exchange_rate is None:
                        await ctx.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", delete_after=7)
                        return
                    converted_amount = (amount * exchange_rate * 100) * (1 - commission_percent)
                    set_crypto_balance(ctx.author.id, user_crypto_balance - amount)
                    set_balance(ctx.author.id, user_balance + converted_amount)
                    from_balance_type = "–±–∏—Ç–∫–æ–∏–Ω–æ–≤"
                    to_balance_type = "–º–æ–Ω–µ—Ç"
                elif to_currency == "—Ä—É–±–ª–∏":
                    exchange_rate = await self.get_crypto_price("bitcoin", "rub")
                    if exchange_rate is None:
                        await ctx.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", delete_after=7)
                        return
                    converted_amount = (amount * exchange_rate) * (1 - commission_percent)
                    set_crypto_balance(ctx.author.id, user_crypto_balance - amount)
                    set_donate_balance(ctx.author.id, user_donate_balance + converted_amount)
                    from_balance_type = "–±–∏—Ç–∫–æ–∏–Ω–æ–≤"
                    to_balance_type = "—Ä—É–±–ª–µ–π"

            commission = amount / exchange_rate * commission_percent if from_currency == "–º–æ–Ω–µ—Ç—ã" else amount * commission_percent

            embed = discord.Embed(title=f"[–ë–ê–ù–ö] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã", color=discord.Color.blue())
            embed.add_field(name="–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:", value=ctx.author.mention, inline=False)
            embed.add_field(name="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑:", value=f"{amount:.2f} {from_balance_type}", inline=False)
            embed.add_field(name="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤:", value=f"{converted_amount:.2f} {to_balance_type}", inline=False)
            embed.add_field(name="–ö–æ–º–∏—Å—Å–∏—è:", value=f"{commission:.2f} {from_balance_type}", inline=False)
            embed.set_footer(text="–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤–∞–ª—é—Ç—É –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏, –∫—É–ø–∏–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ä–æ–ª—å!", icon_url=self.bot.user.display_avatar.url)
            await ctx.send(embed=embed)

        except discord.ext.commands.errors.MissingRequiredArgument:
            await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `,convert <–∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Ü–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞>`")

async def setup(bot):
    await bot.add_cog(BalanceCog(bot))